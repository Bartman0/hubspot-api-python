# coding: utf-8

"""
    Invoices

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hubspot.crm.invoices.models.collection_response_associated_id import CollectionResponseAssociatedId
from hubspot.crm.invoices.models.value_with_timestamp import ValueWithTimestamp
from typing import Optional, Set
from typing_extensions import Self

class SimplePublicObjectWithAssociations(BaseModel):
    """
    SimplePublicObjectWithAssociations
    """ # noqa: E501
    associations: Optional[Dict[str, CollectionResponseAssociatedId]] = None
    created_at: datetime = Field(alias="createdAt")
    archived: Optional[StrictBool] = None
    archived_at: Optional[datetime] = Field(default=None, alias="archivedAt")
    properties_with_history: Optional[Dict[str, List[ValueWithTimestamp]]] = Field(default=None, alias="propertiesWithHistory")
    id: StrictStr
    properties: Dict[str, Optional[StrictStr]]
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["associations", "createdAt", "archived", "archivedAt", "propertiesWithHistory", "id", "properties", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimplePublicObjectWithAssociations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in associations (dict)
        _field_dict = {}
        if self.associations:
            for _key in self.associations:
                if self.associations[_key]:
                    _field_dict[_key] = self.associations[_key].to_dict()
            _dict['associations'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in properties_with_history (dict of array)
        _field_dict_of_array = {}
        if self.properties_with_history:
            for _key in self.properties_with_history:
                if self.properties_with_history[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.properties_with_history[_key]
                    ]
            _dict['propertiesWithHistory'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimplePublicObjectWithAssociations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associations": dict(
                (_k, CollectionResponseAssociatedId.from_dict(_v))
                for _k, _v in obj["associations"].items()
            )
            if obj.get("associations") is not None
            else None,
            "createdAt": obj.get("createdAt"),
            "archived": obj.get("archived"),
            "archivedAt": obj.get("archivedAt"),
            "propertiesWithHistory": dict(
                (_k,
                        [ValueWithTimestamp.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("propertiesWithHistory", {}).items()
            ),
            "id": obj.get("id"),
            "properties": obj.get("properties"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


